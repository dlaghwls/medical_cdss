version: '3.8'

services:
  # Django 백엔드
  django-backend:
    build:
      context: ./backend
    container_name: medical-django-backend
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./frontend:/frontend
    depends_on:
      - postgres
      - redis
    environment:
      - DJANGO_SETTINGS_MODULE=medical_cdss.settings
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/medical_cdss
      - REDIS_URL=redis://redis:6379/0
      - DB_NAME=medical_cdss
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
    env_file:
      - ./.env # medical_cdss-happy 디렉토리의 .env 파일을 참조

    restart: unless-stopped
    networks:
      - medical-network

  # React 프론트엔드
  react-frontend:
    build: ./frontend
    container_name: medical-react-frontend
    ports:
      - "3001:3000"  # Grafana와 충돌 방지 위해 React는 3001로 변경
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    restart: unless-stopped
    networks:
      - medical-network

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
    command: celery -A medical_cdss worker --loglevel=info -Q ml_predictions
    container_name: medical-celery-worker
    depends_on:
      - postgres
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    restart: unless-stopped
    networks:
      - medical-network

  # Celery Beat
  celery-beat:
    build:
      context: ./backend
    command: celery -A medical_cdss beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    container_name: medical-celery-beat
    depends_on:
      - postgres
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    env_file:                           # <--- 이 줄과
      - ./.env 
    volumes:
      - ./backend:/app
      - ./frontend:/frontend
    restart: unless-stopped
    networks:
      - medical-network

  # Flower
  flower:
    build: ./backend
    container_name: medical-flower
    command: celery -A medical_cdss flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped
    networks:
      - medical-network

  # PostgreSQL
  postgres:
    image: postgres:14
    container_name: medical-postgres
    environment:
      POSTGRES_DB: medical_cdss
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - medical-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: medical-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - medical-network

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./backend/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - medical-network

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "4000:3000"  # React와 충돌 방지
    volumes:
      - ./monitoring/grafana_templates:/etc/grafana/provisioning/dashboards
    networks:
      - medical-network

  # OpenMRS MariaDB
  openmrs-db:
    image: mariadb:10.11
    container_name: openmrs-mariadb
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: openmrs
      MYSQL_USER: openmrs
      MYSQL_PASSWORD: Admin123
      MYSQL_ROOT_PASSWORD: Admin123
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci
    volumes:
      - openmrs_db_data:/var/lib/mysql
    networks:
      - medical-network

  # OpenMRS Backend
  openmrs-backend:
    image: openmrs/openmrs-reference-application-3-backend:3.0.0
    container_name: openmrs-backend-app
    restart: unless-stopped
    environment:
      OMRS_CONFIG_CONNECTION_SERVER: openmrs-db
      OMRS_CONFIG_CONNECTION_DATABASE: openmrs
      OMRS_CONFIG_CONNECTION_USERNAME: openmrs
      OMRS_CONFIG_CONNECTION_PASSWORD: Admin123
      OMRS_CONFIG_AUTO_UPDATE_DATABASE: "true"
      OMRS_CONFIG_CREATE_TABLES: "true"
    ports:
      - "8081:8080"
    volumes:
      - openmrs_app_data:/openmrs/data
    depends_on:
      - openmrs-db
    networks:
      - medical-network

  # OpenMRS Frontend
  openmrs-frontend:
    image: openmrs/openmrs-reference-application-3-frontend:3.0.0
    container_name: openmrs-frontend-app
    restart: unless-stopped
    environment:
      SPA_PATH: /openmrs/spa
      API_URL: http://openmrs-backend:8080/openmrs
    depends_on:
      - openmrs-backend
    networks:
      - medical-network

  # Gateway
  gateway:
    image: nginx:alpine
    container_name: openmrs-gateway
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - openmrs-frontend
      - openmrs-backend
    networks:
      - medical-network
# Orthanc PACS server
  orthanc: # <--- 이 부분이 추가된 서비스 정의입니다.
    image: jodogne/orthanc-python:1.12.7
    container_name: medical-orthanc # 일관성을 위해 컨테이너 이름을 명시합니다.
    ports:
      - "8042:8042" # HTTP API 포트
      - "4242:4242" # DICOM C-STORE 포트
    volumes:
      # 호스트의 ./orthanc/orthanc.json 파일을 컨테이너 내부의 /etc/orthanc/orthanc.json에 마운트합니다.
      # 이 파일에 AuthenticationEnabled: true 와 RegisteredUsers가 정확히 설정되어 있어야 합니다.
      - ./orthanc/orthanc.json:/etc/orthanc/orthanc.json
      # Orthanc 데이터를 영구적으로 저장하려면 아래 볼륨을 활성화하세요.
      # - orthanc_data:/var/lib/orthanc
    restart: unless-stopped
    networks:
      - medical-network # Django 백엔드와 동일한 네트워크에 연결

volumes:
  postgres_data:
  redis_data:
  openmrs_db_data:
  openmrs_app_data:
  orthanc_data:
  
networks:
  medical-network:
    driver: bridge
